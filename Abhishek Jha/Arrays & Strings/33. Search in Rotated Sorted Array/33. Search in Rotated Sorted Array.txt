class Solution {

    // pivot element without duplicates
    private int findPivot(int[] arr) {
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (mid < end && arr[mid] > arr[mid + 1]) {
                return mid; // check pivot for right side because mid is greater
            }
            if (mid > start && arr[mid] < arr[mid - 1]) {
                return mid - 1; // check pivot for left side because mid -1 is greater
            }
            if (arr[mid] <= arr[start]) { //here Simple binary search
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }

    public int search(int[] nums, int target, int start, int end) {
        while (start <= end) {
            int mid = (start + end) / 2;
            if (nums[mid] > target) {
                end = mid - 1;
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }

    public int search(int[] nums, int target) {
        int pivot = findPivot(nums);
        int leftBS = search(nums, target, 0, pivot);
        if (leftBS == -1) {
            return search(nums, target, pivot + 1, nums.length - 1);
        }
        return leftBS;
    }
}
